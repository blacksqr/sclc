SCLC Code Size Counter
(University of Hawaii Edition)

Collaborative Software Development Laboratory
University of Hawaii 

1.0 Overview

SCLC counts size of different types of source code files. Currently supported file types include at least the following:  Ada, Assembly, C, C++, Eiffel, Fortran, Java, Lisp, Matlab, Pascal, Perl, Tcl, Zpl, Shell, Make.

There are at least two flavors of SCLC in circulation.  The "original" SCLC was developed by Brad Appleton, and the home page for this flavor is at: http://www.cmcrossroads.com/bradapp/clearperl/sclc-cdiff.html.

Our "University of Hawaii Edition" of SCLC was developed in response to some additional needs we had for SCLC, including support for XML output and high performance computing languages.  The home page for the University of Hawaii Edition is: http://csdl.ics.hawaii.edu/Tools/SCLC/.

2.0 Installation

SCLC requires Perl and the XML::DOM library from CPAN in order to run correctly. Please note that the script has only been tested using Perl 5.

Perl source and binaries can be obtained from http://www.perl.com/download.csp. For a "ready to install" version of Perl try ActivePerl from ActiveState. It supports most platforms and is a free download.

To get the XML::DOM library for Perl, you must install http://search.cpan.org/~enno/libxml-enno-1.02. On Windows, this means downloading the tar.gz file, uncompressing it, and copying the  libxml-enno-1.02/lib/XML directory into your Perl/lib directory.  On Unix, you can use package installers to do this more easily.

When you are done, your Perl/lib directory should contain a directory called XML that contains a bunch of files and subdirectories including the DOM.pm file. 

If you are planning to use the supplied build.xml to run the demo you will need to install Apache Ant. Ant is not required to run the script by itself.

2.1 Running SCLC on itself

The quickest way to check your installation of SCLC is to invoke it on itself. To do this, cd to the src/ directory, and invoke "perl sclc sclc".  Here is some example output:

C:\svn-csdl\sclc\src>perl sclc sclc
 Lines  Blank  Cmnts   NCSL TPtoks
====== ====== ====== ====== ====== ============================================
  2513    213    959   1418   7740 sclc  (Perl)
Note that the actual numbers you get for the size of SCLC may differ depending upon the version of SCLC you are using. 

2.2 Running the SCLC validation test suite

SCLC comes with a validation test suite that ensures that the various language processors are counting code correctly. To run the tests, install Ant, then invoke "ant -f test.build.xml".  The Ant build will fail if any of the tests do not pass.  Here is an example of a successful run of the test suite:

C:\svn-csdl\sclc>ant -f test.build.xml
Buildfile: test.build.xml

test.teststack.java:
     [exec]  Lines  Blank  Cmnts   NCSL TPtoks
     [exec] ====== ====== ====== ====== ====== ============================================
     [exec]     54      7     19     28    198 C:\svn-csdl\sclc\lib\examples/TestStack.java  (Java)

test.pi_calc.c:
     [exec]  Lines  Blank  Cmnts   NCSL TPtoks
     [exec] ====== ====== ====== ====== ====== ============================================
     [exec]     88     11     41     46    274 C:\svn-csdl\sclc\lib\examples/pi_calc.c  (C)

test.pi_calc.f:
     [exec]  Lines  Blank  Cmnts   NCSL TPtoks
     [exec] ====== ====== ====== ====== ====== ============================================
     [exec]     99     18     46     35    209 C:\svn-csdl\sclc\lib\examples/pi_calc.f  (FORTRAN)

test.matrix_multiply.f:
     [exec]  Lines  Blank  Cmnts   NCSL TPtoks
     [exec] ====== ====== ====== ====== ====== ============================================
     [exec]     56      9     18     29    228 C:\svn-csdl\sclc\lib\examples/matrix_multiply.f  (FORTRAN)

test.matrix_multiply.c:
     [exec]  Lines  Blank  Cmnts   NCSL TPtoks
     [exec] ====== ====== ====== ====== ====== ============================================
     [exec]     54      4     25     32    287 C:\svn-csdl\sclc\lib\examples/matrix_multiply.c  (C)

test.markov.m:
     [exec]  Lines  Blank  Cmnts   NCSL TPtoks
     [exec] ====== ====== ====== ====== ====== ============================================
     [exec]     36      4     13     19    165 C:\svn-csdl\sclc\lib\examples/markov.m  (Matlab)



all.test:

BUILD SUCCESSFUL
Total time: 2 seconds
It is quite easy to extend the test suite to handle tests for new languages.  To write the test, create a test file in the language of choice, then manually count the number of lines, comments, tokens, and whatever else is important to check in the output.  Then write an Ant target using the supplied <runTest> and <assertContains> macros to invoke SCLC on your file and check the output for the required data.  Here's an example test for a sample Fortran file:

  <target name="test.pi_calc.f">
    <runTest property.name="pi_calc.f.data" test.file="${testfile.dir}/pi_calc.f" />
    <assertContains property.name="pi_calc.f.data" property.string="sourceLines=&quot;35&quot;" />
    <assertContains property.name="pi_calc.f.data" property.string="commentLines=&quot;46&quot;" />
  </target>
Check the test.build.xml file for more examples. 

3.0 Usage

To see the complete list of options available for SCLC please run "perldoc sclc". The output will contain all the options available, their descriptions, and some examples of the more advanced features. An HTML version of the Perl Doc for the most recently released version of SCLC is available at: http://csdl.ics.hawaii.edu/Tools/SCLC/svn/build/html/sclc.html.

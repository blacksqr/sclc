This document describes the use of
  mkfcall.sh: for building the FACETS framework and components
  cron.sh: for building the framework and running the tests

$Id: README 395 2009-12-30 03:33:06Z cary $

This directory includes
  1. the source code physics components as svn:externals (i.e.,
     it automatically brings in other svn repos)
  2. Scripts for building and testing facets:
       mkfcall.sh
       cron.sh
       the bilder subdirectory
  3. fctests: Runs used as regression testing for factes
     Note that it is not configured and run as part of the build
     system.

What is not included:
  There is a separate repository for facets runs which contains physics
  runs and long testing runs.  It is located at the svn repo:
    https://ice.txcorp.com/run/fcrun

To ensure that mkfcall.sh runs successfully you also
need to source one of these two files (depending on your shell):
fcpkgsetup.csh
fcpkgsetup.sh

They are part of another repo, unfortunately (facetspkgs).

mkfcall.sh will build

  bhssolver
  fluxgrid
  fmcfm
  fmcfm-0.9 (serial/parallel)
  nubeam (serial/parallel)
  uedge (serial/parallel/nopetsc)
  facets (serial/parallel/uenopetsc)

By default, these packages are built with a suffix corresponding to their
svn revision number, and installed in $HOME/software.  To see the full
set of options, do

  mkfcall.sh -h

cron.sh invokes mkphysalls.sh to build all the packages and then
runs the tests for uedge and facets.  For results comparisons to
be done, one must have ueresults-$host and uefacets-$host directories
containing accepted results.

USAGE EXAMPLES for mkfcall.sh

Tech-X personal installation with email when done

  ./mkfcall.sh -e $USER

Tech-X public installation with email when done

  ./mkfcall.sh -i /internal -e $USER

Build specifying where to look for facetspkgs and where to install the
framework and components:

Benten general access build:
  ./mkfcall.sh -i /d/facets/internal -p /d/facets/contrib:/d/facets/internal

Franklin general access build:
  ./mkfcall.sh -i /project/projectdirs/facets/franklin/internal -p /project/projectdirs/facets/franklin/contrib:/project/projectdirs/facets/franklin/internal

Franklin personal build (example only):
  ./mkfcall.sh -i /project/projectdirs/facets/$USER/franklin/internal -p /project/projectdirs/facets/franklin/contrib:/project/projectdirs/facets/$USER/franklin/internal

Bassi general access build:
  ./mkfcall.sh -i /project/projectdirs/facets/bassi/internal -p /project/projectdirs/facets/bassi/contrib:/project/projectdirs/facets/bassi/internal

Bassi personal build (example only):
  ./mkfcall.sh -i /project/projectdirs/facets/$USER/bassi/internal -p /project/projectdirs/facets/bassi/contrib:/project/projectdirs/facets/$USER/bassi/internal

Jacquard:
  Java can be run on only the compute nodes or it runs out of memory.
  It may be possible to get around this with the flags,
    export JAVAFLAGS='-Xmx512m'
    export JAVACFLAGS='-J-Xmx512m'
  This is being tested.

  If that does not work, then one should first run the script via
    ./mkfcall.sh -i /project/projectdirs/facets/$USER/jacquard/internal -p /project/projectdirs/facets/jacquard/contrib:/project/projectdirs/facets/$USER/jacquard/internal
  This will at least provide a config.log in each build directory
  that one can run on the back-end nodes.

  Another possibility is to simply run on a backend node by
    qsub -I -q batch -lnodes=1,walltime=2:00:00
  Then run the above script.

USAGE EXAMPLES for cron.sh

"cron.sh -h" gives the options.  Further documentation as time permits.

